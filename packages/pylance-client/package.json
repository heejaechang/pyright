{
    "name": "pylance-client",
    "displayName": "Pylance",
    "description": "Pylance extension to VS Code (FOR DEBUGGING ONLY)",
    "version": "9999.0.0-dev",
    "private": true,
    "license": "SEE LICENSE IN LICENSE.txt",
    "author": {
        "name": "Microsoft Corporation"
    },
    "publisher": "ms-python",
    "repository": {
        "type": "git",
        "url": "https://github.com/microsoft/pyrx"
    },
    "engines": {
        "vscode": "^1.57.0"
    },
    "keywords": [
        "python"
    ],
    "categories": [
        "Programming Languages"
    ],
    "activationEvents": [
        "onLanguage:python",
        "workspaceContains:pyrightconfig.json"
    ],
    "icon": "images/icon.png",
    "main": "./dist/extension.js",
    "browser": "./dist/browser.extension.js",
    "contributes": {
        "languages": [
            {
                "id": "python",
                "aliases": [
                    "Python"
                ],
                "extensions": [
                    ".py",
                    ".pyi"
                ]
            }
        ],
        "commands": [
            {
                "command": "pylance.dumpTokens",
                "title": "Pylance: Dump token streams ..."
            },
            {
                "command": "pylance.dumpNodes",
                "title": "Pylance: Dump parse tree ..."
            },
            {
                "command": "pylance.dumpTypes",
                "title": "Pylance: Dump type info ..."
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "pylance.dumpTokens",
                    "when": "editorLangId == python"
                },
                {
                    "command": "pylance.dumpNodes",
                    "when": "editorLangId == python"
                },
                {
                    "command": "pylance.dumpTypes",
                    "when": "editorLangId == python"
                }
            ]
        },
        "configurationDefaults": {
            "[python]": {
                "editor.wordBasedSuggestions": false
            }
        },
        "configuration": {
            "type": "object",
            "title": "Pylance",
            "properties": {
                "python.analysis.typeshedPaths": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "description": "Paths to look for typeshed modules.",
                    "scope": "resource"
                },
                "python.analysis.stubPath": {
                    "type": "string",
                    "default": "typings",
                    "description": "Path to directory containing custom type stub files.",
                    "scope": "resource"
                },
                "python.analysis.diagnosticMode": {
                    "type": "string",
                    "default": "openFilesOnly",
                    "enum": [
                        "openFilesOnly",
                        "workspace"
                    ],
                    "enumDescriptions": [
                        "Analyzes and reports errors on only open files.",
                        "Analyzes and reports errors on all files in the workspace."
                    ],
                    "scope": "resource"
                },
                "python.analysis.logLevel": {
                    "type": "string",
                    "default": "Info",
                    "enum": [
                        "Error",
                        "Warning",
                        "Info",
                        "Trace"
                    ],
                    "enumDescriptions": [
                        "Log only errors.",
                        "Log errors and warnings.",
                        "Log everything except trace.",
                        "Log everything."
                    ],
                    "scope": "resource"
                },
                "python.analysis.completeFunctionParens": {
                    "type": "boolean",
                    "default": false,
                    "description": "Automatically add brackets for functions.",
                    "scope": "resource"
                },
                "python.analysis.diagnosticSeverityOverrides": {
                    "type": "object",
                    "default": {},
                    "description": "Allows a user to override the severity levels for individual diagnostics.",
                    "scope": "resource",
                    "additionalProperties": {
                        "type": "string",
                        "enum": [
                            "none",
                            "warning",
                            "information",
                            "error"
                        ]
                    }
                },
                "python.analysis.extraPaths": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional import search resolution paths",
                    "scope": "resource"
                },
                "python.pythonPath": {
                    "type": "string",
                    "default": "python",
                    "description": "Path to Python, you can use a custom version of Python.",
                    "scope": "resource"
                },
                "python.venvPath": {
                    "type": "string",
                    "default": "",
                    "description": "Path to folder with a list of Virtual Environments.",
                    "scope": "resource"
                },
                "pyright.disableLanguageServices": {
                    "type": "boolean",
                    "default": false,
                    "description": "Disables type completion, definitions, and references.",
                    "scope": "resource"
                },
                "pyright.openFilesOnly": {
                    "type": "boolean",
                    "default": true,
                    "description": "Report errors only for currently-open files.",
                    "scope": "resource"
                },
                "pyright.useLibraryCodeForTypes": {
                    "type": "boolean",
                    "default": false,
                    "description": "Use library implementations to extract type information when type stub is not present.",
                    "scope": "resource"
                }
            }
        },
        "jsonValidation": [
            {
                "fileMatch": "pyrightconfig.json",
                "url": "./dist/schemas/pyrightconfig.schema.json"
            }
        ],
        "semanticTokenTypes": [
            {
                "id": "module",
                "description": "module",
                "superType": "namespace"
            },
            {
                "id": "intrinsic",
                "description": "intrinsic",
                "superType": "operator"
            },
            {
                "id": "selfParameter",
                "description": "self parameter",
                "superType": "parameter"
            },
            {
                "id": "clsParameter",
                "description": "cls parameter",
                "superType": "parameter"
            },
            {
                "id": "magicFunction",
                "description": "magic aka dunder function",
                "superType": "function"
            }
        ],
        "semanticTokenModifiers": [
            {
                "id": "typeHint",
                "description": "inside a type annotation"
            },
            {
                "id": "typeHintComment",
                "description": "inside a comment style type annotation"
            },
            {
                "id": "decorator",
                "description": "inside a decorator"
            },
            {
                "id": "builtin",
                "description": "built-in identifier"
            }
        ],
        "semanticTokenScopes": [
            {
                "language": "python",
                "scopes": {
                    "selfParameter": [
                        "variable.parameter.function.language.special.self.python"
                    ],
                    "clsParameter": [
                        "variable.parameter.function.language.special.cls.python"
                    ],
                    "magicFunction": [
                        "support.function.magic.python"
                    ],
                    "*.typeHintComment": [
                        "comment.typehint.type.notation.python"
                    ],
                    "function.decorator": [
                        "meta.function.decorator.python"
                    ],
                    "class.decorator": [
                        "meta.function.decorator.python"
                    ]
                }
            }
        ]
    },
    "scripts": {
        "clean": "shx rm -rf ./dist ./out",
        "webpack": "webpack --mode development --progress",
        "webpack-dev": "npm run clean && webpack --mode development --watch --progress"
    },
    "devDependencies": {
        "@types/copy-webpack-plugin": "^8.0.1",
        "@types/node": "^12.20.19",
        "@types/vscode": "~1.57.0",
        "copy-webpack-plugin": "^9.0.1",
        "shx": "^0.3.3",
        "ts-loader": "^9.2.5",
        "typescript": "~4.3.5",
        "webpack": "^5.48.0",
        "webpack-cli": "^4.7.2"
    },
    "dependencies": {
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "path-browserify": "^1.0.1",
        "process": "^0.11.10",
        "semver": "^7.3.5",
        "stream-browserify": "^3.0.0",
        "vscode-jsonrpc": "6.0.0",
        "vscode-languageclient": "7.0.0",
        "vscode-languageserver": "7.0.0",
        "vscode-languageserver-protocol": "3.16.0",
        "vscode-languageserver-types": "3.16.0"
    }
}
