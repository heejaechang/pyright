trigger: none

pr:
  autoCancel: true
  branches:
    include: ['master']

variables:
  nodeVersion: '12.x'

jobs:
  - job: test
    displayName: Build and test
    strategy:
      matrix:
        linux:
          jobName: Linux
          imageName: 'ubuntu-18.04'
        mac:
          jobName: Mac
          imageName: 'macOS-10.15'
        windows-microbuild: # Internal only but faster; do not use for public PRs.
          jobName: Windows
          poolName: 'VSEng-MicroBuildVS2019'
        # windows:
        #   imageName: 'vs2017-win2016'

    pool:
      name: $[variables.poolName]
      vmImage: $[variables.imageName]

    steps:
      - task: NodeTool@0
        displayName: Use Node $(nodeVersion)
        inputs:
          versionSpec: $(nodeVersion)

      - task: Npm@1
        displayName: npm run package
        inputs:
          command: 'custom'
          customCommand: 'run package'

      - task: Npm@1
        displayName: npm run test:all:pipeline
        inputs:
          command: 'custom'
          customCommand: 'run test:all:pipeline'

      - task: PublishPipelineArtifact@1
        displayName: Publish Istanbul report as artifact
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/server/coverage-merged'
          artifact: '$(jobName)-server-coverage-merged'
          publishLocation: 'pipeline'
        condition: succeededOrFailed()

      - task: PublishTestResults@2
        displayName: Publish test results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit.xml'
          testRunTitle: 'Test results for JavaScript'
        condition: succeededOrFailed()

      - task: PublishCodeCoverageResults@1
        displayName: Publish coverage results
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/server/coverage-merged/cobertura-coverage.xml'
          failIfCoverageEmpty: true
        condition: succeededOrFailed()

  - job: style
    displayName: Style
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - task: NodeTool@0
        displayName: Use Node $(nodeVersion)
        inputs:
          versionSpec: $(nodeVersion)

      - task: Npm@1
        displayName: npm run install:all
        inputs:
          command: 'custom'
          customCommand: 'run install:all'

      - bash: git diff --exit-code --name-only
        displayName: Diff after npm install

      - task: Npm@1
        displayName: npm run prettier
        inputs:
          command: 'custom'
          customCommand: 'run prettier'

      - task: Npm@1
        displayName: npm run eslint
        inputs:
          command: 'custom'
          customCommand: 'run eslint'

      - task: Npm@1
        displayName: npm run syncpack:check
        inputs:
          command: 'custom'
          customCommand: 'run syncpack:check'
