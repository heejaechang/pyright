trigger: none

pr:
  autoCancel: true
  branches:
    include: ['master']

variables:
  nodeVersion: '12.x'
  npm_config_cache: $(Pipeline.Workspace)/.npm

jobs:
  - job: test
    displayName: Test
    strategy:
      matrix:
        linux:
          jobName: Linux
          imageName: 'ubuntu-18.04'
        mac:
          jobName: Mac
          imageName: 'macOS-10.15'
        windows-microbuild: # Internal only but faster; do not use for public PRs.
          jobName: Windows
          poolName: 'VSEng-MicroBuildVS2019'
        # windows:
        #   imageName: 'vs2017-win2016'

    pool:
      name: $[variables.poolName]
      vmImage: $[variables.imageName]

    steps:
      - task: NodeTool@0
        displayName: Use Node $(nodeVersion)
        inputs:
          versionSpec: $(nodeVersion)
          checkLatest: true

      - task: Cache@2
        displayName: Cache npm
        inputs:
          key: 'npm | "$(Agent.OS)" | **/package-lock.json, !**/node_modules/**'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)

      - script: npm run install:all
        displayName: npm run install:all

      - bash: |
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 & echo ">>> Started xvfb"
        displayName: Start xvfb
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

      - script: npm run test:all:pipeline
        displayName: npm run test:all:pipeline
        condition: ne(variables['Agent.OS'], 'Windows')
        env:
          DISPLAY: ':99.0'

      - script: npm run test:all-except-extension:pipeline
        displayName: npm run test:all-except-extension:pipeline
        condition: eq(variables['Agent.OS'], 'Windows')
        env:
          DISPLAY: ':99.0'

      - task: PublishPipelineArtifact@1
        displayName: Publish Istanbul report as artifact
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/server/coverage-merged'
          artifact: '$(jobName)-server-coverage-merged'
          publishLocation: 'pipeline'
        condition: succeededOrFailed()

      - task: PublishTestResults@2
        displayName: Publish test results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit.xml'
          testRunTitle: 'Test results for JavaScript'
        condition: succeededOrFailed()

      - task: PublishCodeCoverageResults@1
        displayName: Publish coverage results
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/server/coverage-merged/cobertura-coverage.xml'
          failIfCoverageEmpty: true
        condition: succeededOrFailed()

  - job: style
    displayName: Style
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - task: NodeTool@0
        displayName: Use Node $(nodeVersion)
        inputs:
          versionSpec: $(nodeVersion)
          checkLatest: true

      - task: Cache@2
        displayName: Cache npm
        inputs:
          key: 'npm | "$(Agent.OS)" | **/package-lock.json, !**/node_modules/**'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)

      - script: npm run install:all
        displayName: npm run install:all

      - bash: git diff --exit-code --name-only
        displayName: Diff after npm install

      - script: npm run prettier
        displayName: npm run prettier

      - script: npm run eslint
        displayName: npm run eslint

      - script: npm run syncpack:check
        displayName: npm run syncpack:check

  - job: package
    displayName: Package
    pool:
      name: 'VSEng-MicroBuildVS2019' # This is where we do our final builds for distribution; test packaging here.

    steps:
      - task: NodeTool@0
        displayName: Use Node $(nodeVersion)
        inputs:
          versionSpec: $(nodeVersion)
          checkLatest: true

      - task: Cache@2
        displayName: Cache npm
        inputs:
          key: 'npm | "$(Agent.OS)" | **/package-lock.json, !**/node_modules/**'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)

      - script: npm run package
        displayName: npm run package

      - script: npm run package
        displayName: package pythia CLI
        workingDirectory: pythia
